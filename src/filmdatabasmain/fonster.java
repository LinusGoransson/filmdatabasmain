/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package filmdatabasmain;

import com.mysql.jdbc.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author linusgoransson
 */
public class fonster extends javax.swing.JFrame {
    
    /**
     * Creates new form fonster
     */
    public fonster() {
        initComponents();
        updateTableFromDatabase();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("filmdatabas?zeroDateTimeBehavior=convertToNullPU").createEntityManager();
        filmerQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT f FROM Filmer f");
        filmerList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : filmerQuery.getResultList();
        jPanel1 = new javax.swing.JPanel();
        titelSort = new javax.swing.JLabel();
        idSort = new javax.swing.JLabel();
        IMDbSort = new javax.swing.JLabel();
        arSort = new javax.swing.JLabel();
        regissorSort1 = new javax.swing.JLabel();
        LinusFilmsdatabas = new javax.swing.JLabel();
        beskrivning_Text = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Titel = new javax.swing.JTextField();
        Regissor = new javax.swing.JTextField();
        Betyg = new javax.swing.JTextField();
        Datum = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        InsertButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setMaximumSize(new java.awt.Dimension(1024, 677));
        jPanel1.setPreferredSize(new java.awt.Dimension(1024, 677));
        jPanel1.setLayout(null);

        titelSort.setForeground(new java.awt.Color(255, 0, 0));
        titelSort.setText("Titel");
        titelSort.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        titelSort.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                titelSortMouseClicked(evt);
            }
        });
        jPanel1.add(titelSort);
        titelSort.setBounds(50, 110, 40, 14);

        idSort.setForeground(new java.awt.Color(255, 0, 0));
        idSort.setText("Id");
        idSort.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        idSort.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                idSortMouseClicked(evt);
            }
        });
        jPanel1.add(idSort);
        idSort.setBounds(50, 150, 10, 20);

        IMDbSort.setForeground(new java.awt.Color(255, 0, 0));
        IMDbSort.setText("IMDb");
        IMDbSort.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        IMDbSort.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IMDbSortMouseClicked(evt);
            }
        });
        jPanel1.add(IMDbSort);
        IMDbSort.setBounds(50, 230, 40, 14);

        arSort.setForeground(new java.awt.Color(255, 0, 0));
        arSort.setText("År");
        arSort.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        arSort.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                arSortMouseClicked(evt);
            }
        });
        jPanel1.add(arSort);
        arSort.setBounds(50, 260, 60, 14);

        regissorSort1.setForeground(new java.awt.Color(255, 0, 0));
        regissorSort1.setText("Regissör");
        regissorSort1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        regissorSort1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                regissorSort1MouseClicked(evt);
            }
        });
        jPanel1.add(regissorSort1);
        regissorSort1.setBounds(50, 190, 60, 14);

        LinusFilmsdatabas.setFont(new java.awt.Font("Calibri", 2, 24)); // NOI18N
        LinusFilmsdatabas.setForeground(new java.awt.Color(255, 255, 255));
        LinusFilmsdatabas.setText("Linus Filmdatabas");
        jPanel1.add(LinusFilmsdatabas);
        LinusFilmsdatabas.setBounds(420, 10, 173, 30);

        beskrivning_Text.setForeground(new java.awt.Color(255, 255, 255));
        beskrivning_Text.setText("Beskrivning");
        jPanel1.add(beskrivning_Text);
        beskrivning_Text.setBounds(540, 520, 460, 130);

        jTable1.setBackground(new java.awt.Color(0, 0, 0));
        jTable1.setFont(new java.awt.Font("Calibri", 2, 11)); // NOI18N
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setFocusable(false);
        jTable1.setGridColor(new java.awt.Color(0, 0, 0));
        jTable1.setSelectionBackground(new java.awt.Color(255, 102, 0));
        jTable1.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jTable1.setSurrendersFocusOnKeystroke(true);
        jTable1.getTableHeader().setReorderingAllowed(false);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, filmerList, jTable1);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${titel}"));
        columnBinding.setColumnName("Titel");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${regissör}"));
        columnBinding.setColumnName("Regissör");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${IMDb}"));
        columnBinding.setColumnName("IMDb");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${år}"));
        columnBinding.setColumnName("År");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jTable1.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jTable1ComponentAdded(evt);
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(250);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(180, 50, 670, 430);
        jPanel1.add(Titel);
        Titel.setBounds(100, 510, 211, 30);
        jPanel1.add(Regissor);
        Regissor.setBounds(100, 550, 156, 30);

        Betyg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BetygActionPerformed(evt);
            }
        });
        jPanel1.add(Betyg);
        Betyg.setBounds(100, 590, 59, 30);
        jPanel1.add(Datum);
        Datum.setBounds(100, 630, 59, 30);

        jLabel2.setFont(new java.awt.Font("Calibri", 2, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Titel");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 510, 43, 30);

        jLabel3.setFont(new java.awt.Font("Calibri", 2, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Regissör");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 550, 80, 30);

        jLabel5.setFont(new java.awt.Font("Calibri", 2, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("IMDb");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(10, 590, 54, 30);

        jLabel6.setFont(new java.awt.Font("Calibri", 2, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("År");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(10, 630, 22, 30);

        InsertButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/filmdatabasmain/upload.png"))); // NOI18N
        InsertButton.setText("Insert");
        InsertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertButtonActionPerformed(evt);
            }
        });
        jPanel1.add(InsertButton);
        InsertButton.setBounds(360, 520, 100, 30);

        UpdateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/filmdatabasmain/update.png"))); // NOI18N
        UpdateButton.setText("Update");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });
        jPanel1.add(UpdateButton);
        UpdateButton.setBounds(360, 620, 100, 30);

        Delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/filmdatabasmain/delete.png"))); // NOI18N
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        jPanel1.add(Delete);
        Delete.setBounds(360, 570, 100, 30);

        jLabel4.setForeground(new java.awt.Color(255, 51, 51));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/filmdatabasmain/moviebackground.jpg"))); // NOI18N
        jLabel4.setText("jLabel4");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(0, 0, 1030, 677);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        try {
            Connection connection = ConnectionFactory.getConnection();
            Statement stmt = connection.createStatement();
            
            int i = jTable1.getSelectedRow();
            String id = jTable1.getModel().getValueAt(i, 0).toString();
            String sql = "DELETE FROM `filmer` WHERE `filmer`.`id` = " + id;
            System.out.println(jTable1.getSelectedRow());
            stmt.executeUpdate(sql);
            updateTableFromDatabase();
            JOptionPane.showMessageDialog(null, "Filmen " + Titel.getText() + " är nu raderad ifrån databasen!");
        } catch (Exception ex) {
            //ger felmeddelande vid fel inmatning!
            JOptionPane.showMessageDialog(null, "Fel vid radering!");
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed

        try {
            Connection connection = ConnectionFactory.getConnection();
            Statement stmt = connection.createStatement();
            int i = jTable1.getSelectedRow();
            String id = jTable1.getModel().getValueAt(i, 0).toString();
            String sql = "UPDATE filmer SET titel ='" + Titel.getText() + "',regissör='" + Regissor.getText() + "',IMDb='" + Betyg.getText() + "',år='" + Datum.getText() + "' WHERE id='" + id + "'";
            stmt.executeUpdate(sql);
            updateTableFromDatabase();
        } catch (Exception ex) {
            //ger felmeddelande vid fel inmatning!
            JOptionPane.showMessageDialog(null, "Fel vid update (är filmen vald i tabellen?)");
        }
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void InsertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertButtonActionPerformed
        try {
            Connection connection = ConnectionFactory.getConnection();
            Statement stmt = connection.createStatement();
            String sql = "INSERT INTO `filmer` (`titel`, `regissör`, `IMDb`, `år`) VALUES ('" + Titel.getText() + "','" + Regissor.getText() + "','" + Betyg.getText() + "','" + Datum.getText() + "')";
            stmt.executeUpdate(sql);
            //kallar på updaterings funktionen
            updateTableFromDatabase();
            //skriver ut vad som har sparats i databasen
            JOptionPane.showMessageDialog(null, "Titel: " + Titel.getText() + "\nRegissör: " + Regissor.getText() + "\nBetyg: " + Betyg.getText() + "\nDatum: " + Datum.getText() + "\nFinns nu med i databasen!");

        } catch (Exception ex) {
            //ger felmeddelande vid fel inmatning!
            JOptionPane.showMessageDialog(null, "Fel inmatning");
        }

        //gör så att alla text fält blir blanka.
        Titel.setText("");
        Regissor.setText("");
        Betyg.setText("");
        Datum.setText("");
        

    }//GEN-LAST:event_InsertButtonActionPerformed

    private void BetygActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BetygActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BetygActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        try {
            Connection connection = ConnectionFactory.getConnection();
            Statement stmt = connection.createStatement();
            int i = jTable1.getSelectedRow();
            String id = jTable1.getModel().getValueAt(i, 0).toString();
            TableModel model = jTable1.getModel();
            Titel.setText(model.getValueAt(i, 1).toString());
            Regissor.setText(model.getValueAt(i, 2).toString());
            Betyg.setText(model.getValueAt(i, 3).toString());
            Datum.setText(model.getValueAt(i, 4).toString());
            String sql = "SELECT beskrivning FROM `filmer` WHERE `filmer`.`id` = " + id;  
            stmt.executeUpdate(sql);
            beskrivning_Text.setText(sql);
            beskrivning_Text.repaint();
            
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jTable1ComponentAdded

    }//GEN-LAST:event_jTable1ComponentAdded

    private void titelSortMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_titelSortMouseClicked

            try {
            Connection connection = ConnectionFactory.getConnection();
            Statement stmt = connection.createStatement();
            String sql = "SELECT id, titel, regissör, IMDb, år FROM filmer ORDER BY titel ASC";
            ResultSet data = stmt.executeQuery(sql);
            jTable1.setModel(buildTableModel(data));
            
            //sätter storleken till dess ursprunliga storlek
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(250);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(40);
            //gör så att kolumnen inte går att ändra storlek på 
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            
            //Byter namn på tabell huvuden till Id, Titel, Regissör, IMDb och År 
            jTable1.getColumnModel().getColumn(0).setHeaderValue("Id");
            jTable1.getColumnModel().getColumn(1).setHeaderValue("Titel");
            jTable1.getColumnModel().getColumn(2).setHeaderValue("Regissör");
            jTable1.getColumnModel().getColumn(3).setHeaderValue("IMDb");
            jTable1.getColumnModel().getColumn(4).setHeaderValue("År");
            //Flyttar Id så att den ligger åt höger i tabellen
            DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
            rightRenderer.setHorizontalAlignment(DefaultTableCellRenderer.RIGHT);
            jTable1.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
            
        } catch (SQLException ex) {
            System.out.println("Fel vid titel sortering");
        }
    }//GEN-LAST:event_titelSortMouseClicked

    private void idSortMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_idSortMouseClicked
        try {
            Connection connection = ConnectionFactory.getConnection();
            Statement stmt = connection.createStatement();
            String sql = "SELECT id, titel, regissör, IMDb, år FROM filmer ORDER BY id ASC";
            ResultSet data = stmt.executeQuery(sql);
            jTable1.setModel(buildTableModel(data));
            //sätter storleken till dess ursprunliga storlek
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(250);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(40);
            //gör så att kolumnen inte går att ändra storlek på 
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            
            //Byter namn på tabell huvuden till Id, Titel, Regissör, IMDb och År 
            jTable1.getColumnModel().getColumn(0).setHeaderValue("Id");
            jTable1.getColumnModel().getColumn(1).setHeaderValue("Titel");
            jTable1.getColumnModel().getColumn(2).setHeaderValue("Regissör");
            jTable1.getColumnModel().getColumn(3).setHeaderValue("IMDb");
            jTable1.getColumnModel().getColumn(4).setHeaderValue("År");
            //Flyttar Id så att den ligger åt höger i tabellen
            DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
            rightRenderer.setHorizontalAlignment(DefaultTableCellRenderer.RIGHT);
            jTable1.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
        } catch (SQLException ex) {
            System.out.println("Fel vid id sortering");
        }
    }//GEN-LAST:event_idSortMouseClicked

    private void regissorSort1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_regissorSort1MouseClicked
        try {
            Connection connection = ConnectionFactory.getConnection();
            Statement stmt = connection.createStatement();
            String sql = "SELECT id, titel, regissör, IMDb, år FROM filmer ORDER BY regissör ASC";
            ResultSet data = stmt.executeQuery(sql);
            jTable1.setModel(buildTableModel(data));
            //sätter storleken till dess ursprunliga storlek
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(250);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(40);
            //gör så att kolumnen inte går att ändra storlek på 
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            
            //Byter namn på tabell huvuden till Id, Titel, Regissör, IMDb och År 
            jTable1.getColumnModel().getColumn(0).setHeaderValue("Id");
            jTable1.getColumnModel().getColumn(1).setHeaderValue("Titel");
            jTable1.getColumnModel().getColumn(2).setHeaderValue("Regissör");
            jTable1.getColumnModel().getColumn(3).setHeaderValue("IMDb");
            jTable1.getColumnModel().getColumn(4).setHeaderValue("År");
            //Flyttar Id så att den ligger åt höger i tabellen
            DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
            rightRenderer.setHorizontalAlignment(DefaultTableCellRenderer.RIGHT);
            jTable1.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
        } catch (SQLException ex) {
            System.out.println("Fel vid reggisör sortering");
        }
    }//GEN-LAST:event_regissorSort1MouseClicked

    private void IMDbSortMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IMDbSortMouseClicked
        try {
            Connection connection = ConnectionFactory.getConnection();
            Statement stmt = connection.createStatement();
            String sql = "SELECT id, titel, regissör, IMDb, år FROM filmer ORDER BY IMDb desc";
            ResultSet data = stmt.executeQuery(sql);
            jTable1.setModel(buildTableModel(data));
            //sätter storleken till dess ursprunliga storlek
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(250);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(40);
            //gör så att kolumnen inte går att ändra storlek på 
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            
            //Byter namn på tabell huvuden till Id, Titel, Regissör, IMDb och År 
            jTable1.getColumnModel().getColumn(0).setHeaderValue("Id");
            jTable1.getColumnModel().getColumn(1).setHeaderValue("Titel");
            jTable1.getColumnModel().getColumn(2).setHeaderValue("Regissör");
            jTable1.getColumnModel().getColumn(3).setHeaderValue("IMDb");
            jTable1.getColumnModel().getColumn(4).setHeaderValue("År");
            //Flyttar Id så att den ligger åt höger i tabellen
            DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
            rightRenderer.setHorizontalAlignment(DefaultTableCellRenderer.RIGHT);
            jTable1.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
        } catch (SQLException ex) {
            System.out.println("Fel vid IMDb sortering");
        }
    }//GEN-LAST:event_IMDbSortMouseClicked

    private void arSortMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_arSortMouseClicked
        try {
            Connection connection = ConnectionFactory.getConnection();
            Statement stmt = connection.createStatement();
            String sql = "SELECT id, titel, regissör, IMDb, år FROM filmer ORDER BY år desc";
            ResultSet data = stmt.executeQuery(sql);
            jTable1.setModel(buildTableModel(data));
            //sätter storleken till dess ursprunliga storlek
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(250);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(40);
            //gör så att kolumnen inte går att ändra storlek på 
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            
            //Byter namn på tabell huvuden till Id, Titel, Regissör, IMDb och År 
            jTable1.getColumnModel().getColumn(0).setHeaderValue("Id");
            jTable1.getColumnModel().getColumn(1).setHeaderValue("Titel");
            jTable1.getColumnModel().getColumn(2).setHeaderValue("Regissör");
            jTable1.getColumnModel().getColumn(3).setHeaderValue("IMDb");
            jTable1.getColumnModel().getColumn(4).setHeaderValue("År");
            //Flyttar Id så att den ligger åt höger i tabellen
            DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
            rightRenderer.setHorizontalAlignment(DefaultTableCellRenderer.RIGHT);
            jTable1.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
            
        } catch (SQLException ex) {
            System.out.println("Fel vid år sortering");
        }
    }//GEN-LAST:event_arSortMouseClicked
    private void updateTableFromDatabase() {
        try {
            Connection connection = ConnectionFactory.getConnection();
            Statement stmt = connection.createStatement();
            String sql = "SELECT id, titel, regissör, IMDb, år FROM filmer";
            ResultSet data = stmt.executeQuery(sql);
            jTable1.setModel(buildTableModel(data));
            //sätter storleken till dess ursprunliga storlek
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(250);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(40);
            //gör så att kolumnen inte går att ändra storlek på 
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            
            //Byter namn på tabell huvuden till Id, Titel, Regissör, IMDb och År 
            jTable1.getColumnModel().getColumn(0).setHeaderValue("Id");
            jTable1.getColumnModel().getColumn(1).setHeaderValue("Titel");
            jTable1.getColumnModel().getColumn(2).setHeaderValue("Regissör");
            jTable1.getColumnModel().getColumn(3).setHeaderValue("IMDb");
            jTable1.getColumnModel().getColumn(4).setHeaderValue("År");
            //Flyttar Id så att den ligger åt höger i tabellen
            DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
            rightRenderer.setHorizontalAlignment(DefaultTableCellRenderer.RIGHT);
            jTable1.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
            jScrollPane1.getColumnHeader().setVisible(false);
            
        } catch (SQLException ex) {
            System.out.println("Fel vid updaterings funktionen");
        }
    }

    public static DefaultTableModel buildTableModel(ResultSet rs)
            throws SQLException {

        ResultSetMetaData metaData = rs.getMetaData();

        // names of columns
        Vector<String> columnNames = new Vector<String>();
        int columnCount = metaData.getColumnCount();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));
        }

        // data of the table
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<Object>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }

        return new DefaultTableModel(data, columnNames);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(fonster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(fonster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(fonster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(fonster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new fonster().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Betyg;
    private javax.swing.JTextField Datum;
    private javax.swing.JButton Delete;
    private javax.swing.JLabel IMDbSort;
    private javax.swing.JButton InsertButton;
    private javax.swing.JLabel LinusFilmsdatabas;
    private javax.swing.JTextField Regissor;
    private javax.swing.JTextField Titel;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JLabel arSort;
    private javax.swing.JLabel beskrivning_Text;
    private javax.persistence.EntityManager entityManager;
    private java.util.List<filmdatabasmain.Filmer> filmerList;
    private javax.persistence.Query filmerQuery;
    private javax.swing.JLabel idSort;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel regissorSort1;
    private javax.swing.JLabel titelSort;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
